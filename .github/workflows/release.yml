name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'VERSION'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version
        id: version
        run: |
          if [ -f VERSION ]; then
            echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
          else
            echo "version=0.1.0" >> $GITHUB_OUTPUT
          fi

      - name: Build binary
        run: |
          swiftc -O ackbar.swift -o ackbar
          chmod +x ackbar

      - name: Create universal binary (optional)
        run: |
          # Build for both architectures if needed
          swiftc -O ackbar.swift -o ackbar-x86_64 -target x86_64-apple-macos10.14
          swiftc -O ackbar.swift -o ackbar-arm64 -target arm64-apple-macos11.0
          lipo -create -output ackbar ackbar-x86_64 ackbar-arm64
          rm ackbar-x86_64 ackbar-arm64
        continue-on-error: true

      - name: Test binary
        run: |
          ./ackbar --version
          ./ackbar --test
      
      - name: Verify binary
        run: |
          file ackbar
          otool -L ackbar
          ls -lh ackbar
      
      - name: Generate checksums
        run: |
          shasum -a 256 ackbar > ackbar.sha256
          md5 ackbar > ackbar.md5
          echo "SHA256:" && cat ackbar.sha256
          echo "MD5:" && cat ackbar.md5

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.version || steps.version.outputs.version }}
          release_name: v${{ inputs.version || steps.version.outputs.version }}
          commitish: ${{ github.sha }}
          draft: false
          prerelease: false
          body: |
            ## Installation

            ```bash
            curl -sSL https://github.com/${{ github.repository }}/releases/latest/download/ackbar -o ackbar
            chmod +x ackbar
            sudo mv ackbar /usr/local/bin/
            ```

            ## Verify Download

            ```bash
            # Download checksums
            curl -sSL https://github.com/${{ github.repository }}/releases/latest/download/ackbar.sha256 -o ackbar.sha256
            
            # Verify (macOS)
            shasum -a 256 -c ackbar.sha256
            ```

            ## What's New
            - See [commits](https://github.com/${{ github.repository }}/commits) for details

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ackbar
          asset_name: ackbar
          asset_content_type: application/octet-stream

      - name: Upload SHA256 checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ackbar.sha256
          asset_name: ackbar.sha256
          asset_content_type: text/plain

      - name: Upload MD5 checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ackbar.md5
          asset_name: ackbar.md5
          asset_content_type: text/plain
